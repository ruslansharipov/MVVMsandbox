/**
 * Конфигурация плагина Dependency Graph Generator.
 *
 * Для построения графа нужно запускать Gradle Task "generateDependencyGraphTemplate".
 * Сгенерированные изображения графов хранятся в директории "../build/reports/dependency-graph".
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.vanniktech:gradle-dependency-graph-generator-plugin:0.5.0"
        //https://goo.gl/PysFRK
    }
}


import com.vanniktech.dependency.graph.generator.DependencyGraphGeneratorExtension.Generator
import com.vanniktech.dependency.graph.generator.DependencyGraphGeneratorPlugin
import guru.nidi.graphviz.attribute.Color
import guru.nidi.graphviz.attribute.Style

plugins.apply(DependencyGraphGeneratorPlugin)

//TODO заменить template на название проекта
def generator = new Generator(
        "template", //суффикс для Gradle Task ("generateDependencyGraphTemplate")
        { dependency ->
            //Префикс группы модулей проекта. Для проекта sample-android это будет sample-android
            dependency.getModuleGroup().startsWith("template")
        },
        { dependency ->
            true //включение транзитивных зависимостей
        },
        { node, dependency ->
            //Имя ноды. Содержит префикс группы и имя модуля без дефисов.
            def nodeName = node.name().toString()
            //Вырезаем префикс группы из имени ноды. Для проекта sample-android префикс будет sampleandroid (убираем дефисы)
            def moduleName = nodeName.replace("template", "") //
            def color = ""
            if (moduleName.startsWith("i")) { //i-модуль
                color = "#88AAFF"
            } else if (moduleName.startsWith("cf")) { //cf-модуль
                color = "#FF9933"
            } else if (moduleName.startsWith("f")) { //f-модуль
                color = "#FC46AA"
            } else { //базовый модуль
                color = "#ECECEC"
            }
            node.add(Style.FILLED, Color.rgb(color))
        },
)

dependencyGraphGenerator {
    generators = [Generator.ALL, generator ]
}